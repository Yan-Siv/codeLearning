kotlin                                                                                                                                                              
......................................................................................................................................................              
//поствить все библы для линя. все джавы и котлины есть в хомяках, посмотреть название пакета можно в инете. для работы gradle нужна джава НЕ ВЫШЕ 16.              
иначе не будет сборка и будет сыпать ошибками!!!! выбирать maven как стандартный сборщик для явы и котлина!!!!!                                                     
......................................................................................................................................................              
1. Установка                                                                                                                                                        
1.1 поставить jetbrains com edit                                                                                                                                    
если на винде то с сайта                                                                                                                                            
если на лине то:                                                                                                                                                    
1.либо собирать с tgz                                                                                                                                               
2.либо скачать из аура (для арча)                                                                                                                                   
2. Запуск                                                                                                                                                           
2.1 запустить jetbrains                                                                                                                                             
2.1.1 будет ошибка компилятора(вернее его не будет), нужно обязательно нажать на файл пкм и выбрать run файл.                                                       
тогда создастся файл с конфигом на запуск конкретного файла. либо нажать ктрл+шифт+ф10                                                                              
......................................................................................................................................................
0.комменты
// однострочный коммент
/* */ многострочный коммент
......................................................................................................................................................                                                                                                                                                                                  
1. вывод строки.
---                                                                                                                                                 
fun main(){                                                                                                                                                         
    println("Hello Kotlin")                                                                                                                                         
}
---                                                                                                                                                                
fun - создание функции                                                                                                                                              
main() - метод используемый как главный. его программа запускает первым.                                                                                            
{} - тело метода                                                                                                                                                    
println()- функция вывода инфы на экран/терминал                                                                                                                    
в () - поступает переменные, текст(ОБЯЗАТЕЛЬНО В "", а не '')                                                                                                       
если нужно разделить слова по строкам в одних кавычках, нужно ставить \n
если нужно вставить переменную в вывод, то можно в "" написать $ и имя переменной.
например:
"Hello, $name" - выведет Hello, имя в переменной name
print() - выводит информацию на ту же строку, что и прошлый prtin()
......................................................................................................................................................
2. переменнные
определние пременных делается с помощью val или var(одинаковы) и после : и тип переменной
например:
var x: Int
объявлена переменная x, тип который Int
далее можно ей присвоитть значение
x = 34
ЛИБО можно сделть все в одной строке
val y: Int = 32
----
отличия val от var
val - константа
var - перезаписываемая переменная
----
типы переменных
1. Int - целая переманная от 2^31 до 2^31-1 //занимает 4 байта
2. Short - целая //занимает 2 байта
3. Byte - целая. числа от -128 до 127 //занимает 1 байт
4. Long - целая. от -2^63 до 2^63-1 // занмимает 8 байт
---
если перед ними поставить U то будет переменная без знака. например UByte до 255
так же можно записывать числа в 2й и 16й СС
для этого нужно перед переменной добавить 0x для 16, 0b для 2
var i: int = 0xFFFFFF //число в 16 СС
---
5. Float - число с плавающей точкой. после числа ДОЛЖНА стоять F - 16.01F или 16.01f
6. Double - число с плав точкой
7. Char - любой символ в юникоде. пишется в ''(так же есть спец Char \n и тд.)
8. String - строка. пишется в ""

можно не указывать тип данных, котлин все сделат сам. var i = 5 - Int, var b = 4.4 - double, если с f на конце - то Float
если число беззнаковое(от 0 и до конца), то монжо поставить в конце U или u

9. Any - тип данный, который позволяет перезаписывать переменную с любым типом данных. можно из строки сделать Float или Int и обратно
10. Boolean - true, false
......................................................................................................................................................
3. Ввод двнных
Что бы ввести текстовые данные с клавы нужно применить функцию readLine():
var i: String? = readLine()
Для того, что бы ввести числовые данные с консоли можно воспользоватся преобразованием строки в Int(работает только с ним)
var a = Integer.valueOf(getLine()) - получаем Int данные с ввода. 
Для других числовых типов данных типа Double, Float, Long и тд. нужно использовать Java модуль Scanner. О том как им пользоватся чуть ниже:
Для начала нужно импортировать Scanner, для этого нужно ввести :
import java.util.Scanner
Scanner испортирован.
дальше нужно присвоить переменной функцию Scanner
var i = Scanner(System.`in`) //(` - обратная кавычка, находится на кнопке ё или тильда)
переменной i присвоен метод Scanner. по умолчанию принимает данные в String формате. Для того что бы принимал любые другие значение нужно через . прописать
какой тип данных собирать.
var i = Scanner(System.`in`).nextInt() - будет принимать тип данных Int
Варианты ввода:
.nextInt() - Int
.nextFloat() - float
.nextShort() - short
и тд со всеми типами данных.
......................................................................................................................................................
4. операции с числами
1. сложение y = a + b, вычитание y = a - b, умножение y = a * b, деление y = a/b (если в процессе деления Int на Int образовалась
плавающая точка, напрмиер 11/5=2.2, то дровная часть после . отбрасывается. тоесть пишется в ответе 2, если нужно что бы при деление на число
появлялась плаваюзая точка, нужно использовать вещественый тип числа. тогда при деление 11/5.0 в ответе будет 2.2, а не 2)
2. целочисленное деление - %
11 % 2 = 5
3. для увеличения на 1, можно использовать ++. есть 2 формы записи.
3.1. y = ++x - x = 1, y = 1 - префиксный ++ возвращает значение увеличенной на 1
3.2. y = x++ - x = 1, y = 0 - постфиксный ++ возвращает значение до увеличения на 1
для увеличения на 1, можно использовать ++. есть 2 формы записи.
4. для уменьшения на 1, можно использовать --
4.1. y = --x - x = -1, y = -1 - префиксный ++ возвращает значение уменьшенного на 1
4.2. y = x-- - x = -1, y = 0 - постфиксный ++ возвращает значение до уменьшения на 1
5. присвоение с дальнейшим действием.
5.1 a += b == a = a + b - сложение а и b с последующим присвоением в а
5.2 a -= b == a = a - b - вычитание из а b с последующим присвоением в а
5.3 a *= b == a = a * b - умножение а на b с последующим присвоением в а
5.4 a /= b == a = a / b - деление а на b с последующим присвоением в а
5.5 a %= b == a = a % b - деление a на b по модулю с последующим присвоением в а
6. srl - сдвиг на x вправо в двоичном коде - z = 2(0010) shr 2 => 1000 в 2й
6.1 shl - сдвиг на x влево в двоичном коде - z = 2(0010) shl 2 => 0000 в 2й
......................................................................................................................................................
5. Условные операторы
if - если. условие пишется в () - тело if в {}, там будет то что нужно что бы выполнилось после удовлетворения условия.

val i = 5
val b = 7
if (i < b){
	print("$i < $b") //i < b
}

else - иначе, так же есть  else if - в () - условие, в {} - действие. 

конструкция when(){} // аналогична switch..case в других языках
when - когда. в () переменная которую считывают и проверяют. в {} варианты действия. Напрмиер:
val i = Scanner(System.`in`)
when(i){ // когда i будет равна:
	1 -> print("hello")  // 1 - то написать hello
	2 -> print("Hello 2") // 2 - то написать Hello 2
} // -> [ -(минус), >(знак больше) ] 
что бы выполнялось много команд, нужно писать код в {}
when(){
	1 -> {
		print..
		var..
	}
	2 -> {
		print2..
		val2..
	}
}
так же можно делать условные конструкции. например в 1 уместить 2 условия. например :
when(c){
	12, 14 -> print("") // когда c либо 12, либо 14
	else -> print("") //когда не выполнились условия будет выполнено else.
}

можно проверить на наличие числа в промежутке от in x..y // от x до y 
when(c){
	in 2..7 -> print("") // число c в промежутке от 2 до 7
	!in 8..16 -> print("") // число НЕ в промежутке от 8 до 16
	else -> print("") // если прошлые условия не выполнились
}
с помощью when можно выводить значения

val variable = when(c){
	in 10..100 -> 18
	in 101..200 -> 20
	else -> 76
}
когда c в диапозоне от 10 до 100, переменная variable будет равна 18,  когда от 101 до 200 будет равна 20, если не в этих промежутках, то 76.
......................................................................................................................................................


